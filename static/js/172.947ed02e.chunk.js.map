{"version":3,"file":"static/js/172.947ed02e.chunk.js","mappings":"gUAeaA,GAAaC,EAAAA,EAAAA,aAAW,SAACC,EAAOC,GACzC,IAAQC,EAAsBF,EAAtBE,KAAMC,EAAgBH,EAAhBG,KAAMC,EAAUJ,EAAVI,MACdC,EAAsB,aAATH,EAEnB,GAAsBI,EAAAA,EAAAA,IAASN,GAA/B,eAAOO,EAAP,KAAcC,EAAd,KACA,GAA6BC,EAAAA,EAAAA,GAAc,CAAEC,eAAgBL,IAArDM,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SACVC,GAAWC,EAAAA,EAAAA,QAAO,MAElBC,GAAWC,EAAAA,EAAAA,GAAaH,EAAUZ,GAOxC,OACI,UAAC,KAAD,CAAagB,UAAWT,EAAKU,MAA7B,WACI,SAAC,IAAD,CAAWC,QAAShB,EAApB,SAA2BC,KAC3B,UAAC,IAAD,WACKC,IAAc,SAAC,IAAD,WACX,SAAC,IAAD,CACIe,QAAQ,OACR,aAAYT,EAAS,gBAAkB,kBACvCU,KAAMV,GAAS,SAAC,MAAD,KAAe,SAAC,MAAD,IAC9BW,QAfE,WAClBV,IACIC,EAASU,SACTV,EAASU,QAAQC,MAAM,CAAEC,eAAe,GAE/C,OAcW,SAAC,EAAAC,GAAD,wBACIzB,IAAKc,GACDR,GACAP,GAHR,IAIIE,KAAMS,EAAS,OAAS,iBAI/BH,EAAKU,QAAS,SAAC,KAAD,UAAmBV,EAAKU,UAGlD,IAEDpB,EAAW6B,YAAc,Y,8LC/CnBC,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,MAAOF,EAAAA,KACJE,MAAM,iBACNC,SAAS,YACZC,SAAUJ,EAAAA,KACPK,IAAI,EAAG,cACPC,IAAI,GAAI,aACRH,SAAS,cAGRI,EAAoB,CACxBL,MAAO,GAAIE,SAAU,IAGR,SAASI,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,mCAAG,8FAAST,EAAT,EAASA,MAAOE,EAAhB,EAAgBA,SAAhB,SACbK,GAASG,EAAAA,EAAAA,IAAM,CAAEV,MAAAA,EAAOE,SAAAA,KAAaS,SADxB,2CAAH,sDAIlB,OACE,SAAC,IAAD,CAAMC,SAAS,OAAOC,cAAc,SAASC,WAAW,SAAxD,UACE,SAAC,KAAD,CAAQC,SAAUN,EAChBO,cAAeX,EACfY,iBAAkBpB,EAAcqB,aAAa,MAF/C,SAGG,gBAAGC,EAAH,EAAGA,aAAH,OAAuB,SAAC,KAAD,WACtB,UAAC,IAAD,CAAMC,MAAM,QAAQP,cAAc,SAASQ,IAAK,EAAhD,WACE,SAAC,IAAD,CAAMC,SAAS,MAAf,4BAEA,SAAC,IAAD,CACEjD,MAAM,QACNkD,YAAY,0BACZpD,KAAK,QACLC,KAAK,WAGP,SAAC,IAAD,CACEC,MAAM,WACNkD,YAAY,6BACZpD,KAAK,WACLC,KAAK,cAGP,SAAC,IAAD,CAAQgD,MAAM,KAAKjD,KAAK,SAASqD,UAAWL,EAAcM,SAAUN,EAApE,UACE,SAAC,IAAD,0BAnBL,KA0BR,C","sources":["components/InputField.jsx","components/pages/Login.jsx"],"sourcesContent":["import {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    IconButton,\n    Input,\n    InputGroup,\n    InputRightElement,\n    useDisclosure,\n    useMergeRefs,\n} from '@chakra-ui/react'\nimport { useField } from 'formik';\nimport { forwardRef, useRef } from 'react'\nimport { HiEye, HiEyeOff } from 'react-icons/hi'\n\nexport const InputField = forwardRef((props, ref) => {\n    const { type, name, label } = props;\n    const isPassword = type === 'password'\n\n    const [field, meta] = useField(props);\n    const { isOpen, onToggle } = useDisclosure({ defaultIsOpen: !isPassword })\n    const inputRef = useRef(null)\n\n    const mergeRef = useMergeRefs(inputRef, ref)\n    const onClickReveal = () => {\n        onToggle()\n        if (inputRef.current) {\n            inputRef.current.focus({ preventScroll: true })\n        }\n    }\n    return (\n        <FormControl isInvalid={meta.error}>\n            <FormLabel htmlFor={name}>{label}</FormLabel>\n            <InputGroup>\n                {isPassword && <InputRightElement>\n                    <IconButton\n                        variant=\"text\"\n                        aria-label={isOpen ? 'Mask password' : 'Reveal password'}\n                        icon={isOpen ? <HiEyeOff /> : <HiEye />}\n                        onClick={onClickReveal}\n                    />\n                </InputRightElement>}\n\n                <Input\n                    ref={mergeRef}\n                    {...field}\n                    {...props}\n                    type={isOpen ? 'text' : 'password'}\n                />\n            </InputGroup>\n\n            {meta.error && <FormErrorMessage>{meta.error}</FormErrorMessage>}\n        </FormControl>\n    )\n})\n\nInputField.displayName = 'InputField'","\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup'\nimport { Form, Formik } from 'formik';\nimport { InputField } from 'components/InputField';\nimport { Button, Flex, Text } from '@chakra-ui/react';\n\nimport { logIn } from '../redux/auth/AuthOperation';\n\nconst SignupSchema = yup.object().shape({\n  email: yup.string()\n    .email('Invalid email')\n    .required('Required'),\n  password: yup.string()\n    .min(8, 'Too Short!')\n    .max(15, 'Too Long!')\n    .required('Required'),\n});\n\nconst initialFormValues = {\n  email: \"\", password: \"\",\n}\n\nexport default function Login() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async ({ email, password }) => {\n    await dispatch(logIn({ email, password })).unwrap();\n  };\n\n  return (\n    <Flex maxWidth='100%' flexDirection='column' alignItems='center' >\n      <Formik onSubmit={handleSubmit}\n        initialValues={initialFormValues}\n        validationSchema={SignupSchema} autoComplete=\"off\">\n        {({ isSubmitting }) => (<Form>\n          <Flex width='600px' flexDirection='column' gap={6}>\n            <Text fontSize='2xl'>Page of LogIn</Text>\n\n            <InputField\n              label=\"Email\"\n              placeholder=\"Please enter your email\"\n              type=\"email\"\n              name=\"email\"\n            />\n\n            <InputField\n              label=\"Password\"\n              placeholder=\"Please enter your password\"\n              type=\"password\"\n              name=\"password\"\n            />\n\n            <Button width='xs' type='summit' isLoading={isSubmitting} disabled={isSubmitting}>\n              <Text>Login</Text>\n            </Button>\n          </Flex>\n        </Form>)}\n      </Formik>\n    </Flex>\n  );\n}\n"],"names":["InputField","forwardRef","props","ref","type","name","label","isPassword","useField","field","meta","useDisclosure","defaultIsOpen","isOpen","onToggle","inputRef","useRef","mergeRef","useMergeRefs","isInvalid","error","htmlFor","variant","icon","onClick","current","focus","preventScroll","I","displayName","SignupSchema","yup","shape","email","required","password","min","max","initialFormValues","Login","dispatch","useDispatch","handleSubmit","logIn","unwrap","maxWidth","flexDirection","alignItems","onSubmit","initialValues","validationSchema","autoComplete","isSubmitting","width","gap","fontSize","placeholder","isLoading","disabled"],"sourceRoot":""}