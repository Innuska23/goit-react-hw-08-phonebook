{"version":3,"file":"static/js/456.c3c5806a.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormContact = styled(Form)`\n    display: flex;\n    flex-flow: column wrap;\n    gap: 25px;\n    font-size: 22px;\n    max-width: 450px`;\n\nexport const LabelForm = styled.label`\n    color: #333340;\n    background: #ffffff;\n    font-weight: 500;`;\n\nexport const InputForm = styled(Field)`\n    display: inline-block;\n    font-size: 22px;\n    background: #EDF2F7;\n    border-color: green;\n    outline: none;\n    border-radius: 6px;\n    height: 38px;\n    &:hover {\n        box-shadow: 0px 0px 30px 0px rgba(21,115,71,1)\n    `;\n\nexport const ButtonForm = styled.button`\n    padding: 5px 20px;\n    color: white;\n    height: 48px;\n    border-radius: 12px;\n    background-color: #198754;\n    cursor: pointer;\n    font-size: 24px;\n    outline: none;\n    border: 1px solid;\n    &:hover {\n    background-color: #157347;\n    border: none;\n    box-shadow: 0px 0px 30px 0px rgba(21,115,71,1);\n    }\n`;\n\nexport const Error = styled(ErrorMessage)`\n    color: red;\n    font-size: 20px;\n    text-align: center;\n`;","const selectFilter = state => state.contacts.filter;\n\nexport const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.contacts.error;\n\nexport const selectVisibleContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n  return contacts.filter(({ name }) => name.toLowerCase().includes(filter));\n};","import { nanoid } from '@reduxjs/toolkit';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { FormContact, Error, InputForm, LabelForm, ButtonForm } from './ContactForm.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../redux/operations';\nimport { selectContacts } from '../redux/selectors';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleSubmit = (e, { resetForm }) => {\n\n    const name = e.name.trim();\n    if (contacts.find(el => el.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts`);\n      resetForm();\n      return;\n    }\n    const number = e.number;\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <FormContact autoComplete=\"off\">\n        <LabelForm htmlFor={nameInputId}>\n          Name\n        </LabelForm>\n        <InputForm\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <Error name=\"name\" component=\"div\" />\n\n        <LabelForm htmlFor={numberInputId}>\n          <span>Number</span>\n        </LabelForm>\n        <InputForm\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <Error name=\"number\" component=\"div\" />\n\n        <ButtonForm type=\"submit\">Add contact</ButtonForm>\n      </FormContact>\n    </Formik>\n  );\n}\n\nexport default ContactForm;","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 10px;\n    padding: 0;\n    list-style: none;\n    font-size: 22px;\n    width: 550px;\n    align-items: stretch;\n`;\n\nexport const ListItem = styled.li`\n    display: flex;\n    gap: 40px;\n    align-items: center;\n    font-size: 22px;\n    justify-content: space-between;\n`;\n\nexport const Button = styled.button`\n    border-radius: 12px;\n    width: 150px;\n    text-transform: capitalize;\n    align-items: center;\n    justify-content: center;\n    padding: 5px 20px;\n    color: #333340;\n    border: 1px solid;\n    width: 155px;\n    color: white;\n    height: 48px;\n    background-color: #bb2d3b;\n    cursor: pointer;\n    font-size: 22px;\n    outline: none;\n    &:hover {\n    background-color: #dc3545;\n    border: none;\n    box-shadow: 10px 10px 25px 0px rgba(187,45,59,1);\n    }\n`;","import { useSelector } from 'react-redux';\n// import { selectContacts, selectFilter } from '../redux/selectors';\nimport { selectVisibleContacts } from '../redux/selectors';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { Button, List, ListItem } from './ContactList.styled';\nimport { deleteContact } from '../redux/operations';\n\n\nfunction ContactList() {\n    const dispatch = useDispatch();\n    const onDelete = (id) => {\n        dispatch(deleteContact(id));\n    };\n\n    // const contacts = useSelector(selectContacts);\n    // const filter = useSelector(selectFilter);\n    // const filterContacts = contacts.filter(({ name }) =>\n    //     name.toLowerCase().includes(filter)\n    // );\n    // eslint-disable-next-line\n    const visibleContacts = useSelector(selectVisibleContacts);\n  return (\n        <List>\n            {visibleContacts.map(({ id, name, number }, idx) => (\n                <ListItem key={id}>\n                    <span>{idx + 1}. {name}: {number} </span>\n                    <Button onClick={() => onDelete(id)}>delete</Button>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nContactList.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nexport const FilterContainer = styled.div`\n    display: flex;\n    flex-flow: column wrap;\n    gap: 25px;\n    font-size: 22px;\n    max-width: 450px;\n`;\n\nexport const LabelFilter = styled.label`\n    color: #333340;\n    background: #ffffff;\n    font-weight: 500;\n`;\n\nexport const InputFilter = styled.input`\n  display: inline-block;\n    font-size: 22px;\n    background: #EDF2F7;\n    border-color: green;\n    outline: none;\n    border-radius: 6px;\n    height: 38px;\n    &:hover {\n      box-shadow: 0px 0px 30px 0px rgba(21,115,71,1);\n    }\n`;","import { useDispatch } from 'react-redux';\nimport { setFilter } from '../redux/filterSlice';\n\nimport { FilterContainer, InputFilter, LabelFilter } from './Filter.styled';\n\nfunction Filter() {\n    const dispatch = useDispatch();\n    const handlerChangeFilter = e => {\n        dispatch(setFilter(e.target.value.toLowerCase().trim()));\n    };\n    return (\n        <FilterContainer>\n            <LabelFilter htmlFor=\"filter\">Find contacts by name:</LabelFilter>\n            <InputFilter\n                id=\"filter\"\n                type=\"text\"\n                name=\"filter\"\n                onChange={handlerChangeFilter}\n            />\n        </FilterContainer>\n    );\n}\n\nexport default Filter;","import AppBar from 'components/AppBar/AppBar';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nexport default function Contacts() {\n    return (\n        <div>\n            <AppBar />\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactList />\n        </div>\n    );\n}"],"names":["FormContact","styled","Form","LabelForm","InputForm","Field","ButtonForm","Error","ErrorMessage","selectContacts","state","contacts","items","selectVisibleContacts","filter","selectFilter","name","toLowerCase","includes","schema","yup","shape","required","number","initialValues","nameInputId","nanoid","numberInputId","dispatch","useDispatch","useSelector","onSubmit","e","resetForm","trim","find","el","alert","newContact","id","addContact","validationSchema","autoComplete","htmlFor","type","pattern","title","component","List","ListItem","Button","visibleContacts","map","idx","onClick","deleteContact","onDelete","FilterContainer","LabelFilter","InputFilter","onChange","setFilter","target","value","Contacts","AppBar"],"sourceRoot":""}