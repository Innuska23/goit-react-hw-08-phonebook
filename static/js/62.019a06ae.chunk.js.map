{"version":3,"file":"static/js/62.019a06ae.chunk.js","mappings":"+TAeaA,GAAaC,EAAAA,EAAAA,aAAW,SAACC,EAAOC,GACzC,IAAQC,EAAsBF,EAAtBE,KAAMC,EAAgBH,EAAhBG,KAAMC,EAAUJ,EAAVI,MACdC,EAAsB,aAATH,EAEnB,GAAsBI,EAAAA,EAAAA,IAASN,GAA/B,eAAOO,EAAP,KAAcC,EAAd,KACA,GAA6BC,EAAAA,EAAAA,GAAc,CAAEC,eAAgBL,IAArDM,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SACVC,GAAWC,EAAAA,EAAAA,QAAO,MAElBC,GAAWC,EAAAA,EAAAA,GAAaH,EAAUZ,GAOxC,OACI,UAAC,KAAD,CAAagB,UAAWT,EAAKU,MAA7B,WACI,SAAC,IAAD,CAAWC,QAAShB,EAApB,SAA2BC,KAC3B,UAAC,IAAD,WACKC,IAAc,SAAC,IAAD,WACX,SAAC,IAAD,CACIe,QAAQ,OACR,aAAYT,EAAS,gBAAkB,kBACvCU,KAAMV,GAAS,SAAC,MAAD,KAAe,SAAC,MAAD,IAC9BW,QAfE,WAClBV,IACIC,EAASU,SACTV,EAASU,QAAQC,MAAM,CAAEC,eAAe,GAE/C,OAcW,SAAC,EAAAC,GAAD,wBACIzB,IAAKc,GACDR,GACAP,GAHR,IAIIE,KAAMS,EAAS,OAAS,iBAI/BH,EAAKU,QAAS,SAAC,KAAD,UAAmBV,EAAKU,UAGlD,IAEDpB,EAAW6B,YAAc,Y,wMCjDnBC,EAAeC,EAAAA,KAAaC,MAAM,CACpC3B,KAAM0B,EAAAA,KAAaE,IAAI,EAAG,cACrBC,IAAI,GAAI,aACRC,SAAS,YACdC,MAAOL,EAAAA,KACFK,MAAM,iBACND,SAAS,YACdE,SAAUN,EAAAA,KACLE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAGZG,EAAoB,CACtBF,MAAO,GAAIC,SAAU,GAAIhC,KAAM,IAGpB,SAASkC,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,mCAAG,gGAASN,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SAAUhC,EAA1B,EAA0BA,KAA1B,SACXmC,GAASG,EAAAA,EAAAA,IAAS,CAAEP,MAAAA,EAAOC,SAAAA,EAAUhC,KAAAA,KAASuC,SADnC,2CAAH,sDAIlB,OACI,SAAC,IAAD,CAAMC,SAAS,OAAOC,cAAc,SAASC,WAAW,SAAxD,UACI,SAAC,KAAD,CAAQC,SAAUN,EACdO,cAAeX,EACfY,iBAAkBpB,EAAcqB,aAAa,MAFjD,SAGK,gBAAGC,EAAH,EAAGA,aAAH,OAAuB,SAAC,KAAD,WACpB,UAAC,IAAD,CAAMC,MAAM,QAAQP,cAAc,SAASQ,IAAK,EAAhD,WACI,SAAC,IAAD,CAAMC,SAAS,MAAf,mCAEA,SAAC,IAAD,CACIjD,MAAM,QACNkD,YAAY,0BACZpD,KAAK,QACLC,KAAK,WAGT,SAAC,IAAD,CACIC,MAAM,OACNkD,YAAY,yBACZpD,KAAK,OACLC,KAAK,UAGT,SAAC,IAAD,CACIC,MAAM,WACNkD,YAAY,6BACZpD,KAAK,WACLC,KAAK,cAGT,SAAC,IAAD,CAAQgD,MAAM,KAAKjD,KAAK,SAASqD,SAAUL,EAA3C,SACKA,GAAe,SAAC,IAAD,KAAc,SAAC,IAAD,6BA1BzC,KAiChB,C","sources":["components/InputField.jsx","components/pages/Registration.jsx"],"sourcesContent":["import {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    IconButton,\n    Input,\n    InputGroup,\n    InputRightElement,\n    useDisclosure,\n    useMergeRefs,\n} from '@chakra-ui/react'\nimport { useField } from 'formik';\nimport { forwardRef, useRef } from 'react'\nimport { HiEye, HiEyeOff } from 'react-icons/hi'\n\nexport const InputField = forwardRef((props, ref) => {\n    const { type, name, label } = props;\n    const isPassword = type === 'password'\n\n    const [field, meta] = useField(props);\n    const { isOpen, onToggle } = useDisclosure({ defaultIsOpen: !isPassword })\n    const inputRef = useRef(null)\n\n    const mergeRef = useMergeRefs(inputRef, ref)\n    const onClickReveal = () => {\n        onToggle()\n        if (inputRef.current) {\n            inputRef.current.focus({ preventScroll: true })\n        }\n    }\n    return (\n        <FormControl isInvalid={meta.error}>\n            <FormLabel htmlFor={name}>{label}</FormLabel>\n            <InputGroup>\n                {isPassword && <InputRightElement>\n                    <IconButton\n                        variant=\"text\"\n                        aria-label={isOpen ? 'Mask password' : 'Reveal password'}\n                        icon={isOpen ? <HiEyeOff /> : <HiEye />}\n                        onClick={onClickReveal}\n                    />\n                </InputRightElement>}\n\n                <Input\n                    ref={mergeRef}\n                    {...field}\n                    {...props}\n                    type={isOpen ? 'text' : 'password'}\n                />\n            </InputGroup>\n\n            {meta.error && <FormErrorMessage>{meta.error}</FormErrorMessage>}\n        </FormControl>\n    )\n})\n\nInputField.displayName = 'InputField'","import { useDispatch } from 'react-redux';\nimport { register } from '../redux/auth/AuthOperation';\nimport * as yup from 'yup'\nimport { Button, Flex, Spinner, Text } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport { InputField } from 'components/InputField';\n\nconst SignupSchema = yup.object().shape({\n    name: yup.string().min(2, 'Too Short!')\n        .max(50, 'Too Long!')\n        .required('Required'),\n    email: yup.string()\n        .email('Invalid email')\n        .required('Required'),\n    password: yup.string()\n        .min(8, 'Too Short!')\n        .max(15, 'Too Long!')\n        .required('Required'),\n});\n\nconst initialFormValues = {\n    email: \"\", password: \"\", name: '',\n}\n\nexport default function Login() {\n    const dispatch = useDispatch();\n\n    const handleSubmit = async ({ email, password, name }) => {\n        await dispatch(register({ email, password, name })).unwrap();\n    };\n\n    return (\n        <Flex maxWidth='100%' flexDirection='column' alignItems='center' >\n            <Formik onSubmit={handleSubmit}\n                initialValues={initialFormValues}\n                validationSchema={SignupSchema} autoComplete=\"off\">\n                {({ isSubmitting }) => (<Form>\n                    <Flex width='600px' flexDirection='column' gap={6}>\n                        <Text fontSize='2xl'>Page of registration</Text>\n\n                        <InputField\n                            label=\"Email\"\n                            placeholder=\"Please enter your email\"\n                            type=\"email\"\n                            name=\"email\"\n                        />\n\n                        <InputField\n                            label=\"Name\"\n                            placeholder=\"Please enter your name\"\n                            type=\"name\"\n                            name=\"name\"\n                        />\n\n                        <InputField\n                            label=\"Password\"\n                            placeholder=\"Please enter your password\"\n                            type=\"password\"\n                            name=\"password\"\n                        />\n\n                        <Button width='xs' type='summit' disabled={isSubmitting}>\n                            {isSubmitting ? <Spinner /> : <Text>Register</Text>}\n                        </Button>\n                    </Flex>\n                </Form>)}\n            </Formik>\n        </Flex>\n    );\n}\n"],"names":["InputField","forwardRef","props","ref","type","name","label","isPassword","useField","field","meta","useDisclosure","defaultIsOpen","isOpen","onToggle","inputRef","useRef","mergeRef","useMergeRefs","isInvalid","error","htmlFor","variant","icon","onClick","current","focus","preventScroll","I","displayName","SignupSchema","yup","shape","min","max","required","email","password","initialFormValues","Login","dispatch","useDispatch","handleSubmit","register","unwrap","maxWidth","flexDirection","alignItems","onSubmit","initialValues","validationSchema","autoComplete","isSubmitting","width","gap","fontSize","placeholder","disabled"],"sourceRoot":""}